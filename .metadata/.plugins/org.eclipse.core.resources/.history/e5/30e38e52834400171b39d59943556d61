package BinaryTrees;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class BinaryTreeOperations {
	{
		int count=0;
	}
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Node root=new Node(10);
		root.left=new Node(22);
		root.right=new Node(30);
		root.left.left=new Node(11);
		root.left.right=new Node(12);
		root.right.left=new Node(1);
		root.right.right=new Node(42);
		int height=height(root);
		System.out.println("The height of the tree is : "+height);
		System.out.println("the sum of all noes : "+sumOfAllNodes(root));
		System.out.println("Diagonal sum :: ");
		printDiagonalSum(root);
		System.out.println("printing all possible paths");
		Stack<Node>tracker=new Stack<Node>();
		printAllPaths(root, tracker);
		System.out.println("printing paths with sum equal to 43");
		Stack<Node>tracker2=new Stack<Node>();
		printPathWithSum(root, tracker2, 0, 43);
		System.out.println("now printing the LCM");
		leastCommonAncestor(root, 1, 11);
		System.out.println("printing the Bottom view");
		bottomView(root);
		System.out.println("printing the zig zag view of a tree");
		spiralView(root);
	}
	public static int sumOfAllNodes(Node root){
		if(root==null){
			return 0;
		}
		int data=root.data+sumOfAllNodes(root.left)+sumOfAllNodes(root.right);
		return data;
	}
	
	public static int height(Node root){
		if(root==null){
			return 0;
		}
		int lh=height(root.left);
		int rh=height(root.right);
		if(lh>rh){
			return 1+lh;
		}else{
			return 1+rh;
		}
	}
	public static void printDiagonalSum(Node root){
		Queue<Node>tracker=new LinkedList<Node>();
		tracker.add(root);
		tracker.add(null);
		while(!tracker.isEmpty()){
			Node p=tracker.poll();
			if(p==null){
				p=tracker.poll();
				if(p==null){
					break;
				}
			}
			int sum=0;
			while(p!=null){
				sum=sum+p.data;
				if(p.left !=null){
					tracker.add(p.left);
				}
				p=p.right;
			}
			System.out.println("sum : "+sum);
		}
		
	}
	public static void printAllPaths(Node root,Stack<Node>tracker){
		
		if(root==null){
			return;
		}
		tracker.push(root);
		printAllPaths(root.left,tracker);
		if(root.left==null && root.right==null){
			for(int i=0;i<tracker.size();i++){
				System.out.print(tracker.elementAt(i).data+"  ");
			}
		}
		printAllPaths(root.right, tracker);
		System.out.println();
		tracker.pop();
	}
	
	public static void printPathWithSum(Node root,Stack<Node>tracker,int sum,int total){
		if(root==null){
			return;
		}
		sum=sum+root.data;
		tracker.push(root);
		if(sum==total){
			for(int i=0;i<tracker.size();i++){
				System.out.print(tracker.elementAt(i).data+ "  ");
			}
		}
		printPathWithSum(root.left, tracker, sum, total);
		printPathWithSum(root.right, tracker, sum, total);
		sum=sum-tracker.pop().data;
		
	}
	
	public static boolean leastCommonAncestor(Node root,int data1,int data2){
		
		if(root==null){
			return false;
		}
		if(root.data==data1|| root.data==data2){
			return true;
		}
		boolean left=leastCommonAncestor(root.left, data1, data2);
		boolean right=leastCommonAncestor(root.right, data1, data2);
		if(left && right){
			System.out.println("this is the LCM  "+root.data);
			return true;
		}else{
			if(left){
				return left;
			}else{
				return right;
			}
		}
	}
	
	public static void bottomView(Node root){
		if(root==null){
			return;
		}
		bottomView(root.left);
		if(root.left==null && root.right==null){
			System.out.print(root.data+" ");
		}
		bottomView(root.right);
		
	}
	
	public static void spiralView(Node root){
		
		Stack<Node>s1=new Stack<Node>();
		Stack<Node>s2=new Stack<Node>();
		s1.push(root);
		while(s1.size()>0||s2.size()>0){
			while(!s1.isEmpty()){
				Node temp=s1.pop();
				System.out.print(temp.data+"  ");
				if(temp!=null){
					if(temp.left!=null)
					s2.push(temp.left);
					if(temp.right!=null)
					s2.push(temp.right);
				}
			}
			while(!s2.empty()){
				Node temp=s2.pop();
				System.out.print(temp.data+"  ");
				if(temp!=null){
					if(temp.right!=null)
					s1.push(temp.right);
					if(temp.left!=null)
					s1.push(temp.left);
				}
			}
		}
			
		
	}
	
	public static void numberOfLeafNodes(Node root){
		if()
	}

}
