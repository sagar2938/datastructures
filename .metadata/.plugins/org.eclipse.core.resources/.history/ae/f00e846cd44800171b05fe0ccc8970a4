package Graphs;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
import java.util.zip.Adler32;

public class GraphOpertions {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int V=6;
		Graph graph=createGrph(V);
		addEdge(graph, 0, 4,12);
		addEdge(graph, 4, 5,1);
		addEdge(graph, 1, 2,2);
		addEdge(graph, 1, 3,4);
		//addEdge(graph,1, 4);
		addEdge(graph, 2, 3,5);
		//addEdge(graph,3, 4);
		printGraph(graph);
		System.out.println("printing the binary search of the graph");
		breadFirstSearch(graph, 0);
		System.out.println();
		System.out.println("printing the depth first search of the graph");
		depthFirstSearch(graph);
		System.out.println();
		System.out.println("printing the topological sort of the graph");
		topologicalSort(graph);
		System.out.println();
		System.out.println("printing the mother vertex of the graph");
		motherVertexGraph(graph);
	}
	
	public static Graph createGrph(int V){
		Graph graph=new Graph(V);
		return graph;
	}
	
	public static void addEdge(Graph graph,int src,int dest,int weight){
		
		AdjListNode newNode =new AdjListNode(dest,weight);
		
		//adding adj vertices(list) of source to the new node
		System.out.println(graph.adjNodeList[dest].head);
		newNode.next=graph.adjNodeList[src].head;
		//setting the newNod as the adjecent node
		graph.adjNodeList[src].head=newNode;
		
		/// this is incase of non directed graphs
		
		AdjListNode newNode2=new AdjListNode(src,weight);
		
		//adding adj list of the other one to src
		
		newNode2.next=graph.adjNodeList[dest].head;
		
		//settin this new node as the adjecent node
		
		graph.adjNodeList[dest].head=newNode2;
		
		
	}
	public static void printGraph(Graph graph){
		int v;
		for(int i=0;i<graph.V;i++){
			AdjListNode head=graph.adjNodeList[i].head;
			System.out.print(i +" --> ");
			while(head !=null){
				System.out.print(head.dest+"  ");
				head=head.next;
			}
			System.out.println();
		}
	}
	
	public static void breadFirstSearch(Graph graph,int s){
		
		Queue<Integer> nodeQueue =new LinkedList<Integer>();
		boolean visited[]=new boolean[graph.V];
		nodeQueue.add(s);
		visited[s]=true;
		while(!nodeQueue.isEmpty()){
			int node=nodeQueue.poll();
			System.out.print(node+"  ");
			AdjListNode head=graph.adjNodeList[node].head;
			while(head !=null){
				if(visited[head.dest]!=true){
					nodeQueue.add(head.dest);
					visited[head.dest]=true;
				}
				head=head.next;
			}
		}
	}
	
	public static void depthFirstSearch(Graph graph){
		boolean visited[]=new boolean[graph.V];
		for(int i=0;i<graph.V;i++){
			if(visited[i]!=true){
				depthFirstSearchUtil(graph, 0, visited);
			}
		}
		
	}
	
	public static void depthFirstSearchUtil(Graph graph,int s,boolean[] visited){
		
			System.out.print(s+"  ");
			visited[s]=true;
		
		
		AdjListNode head=graph.adjNodeList[s].head;
		while(head!=null){
			if(visited[head.dest]!=true)
				depthFirstSearchUtil(graph, head.dest, visited);
			head=head.next;
		}
		
	}
	public static void topologicalSortUtil(Graph graph,int v,boolean visited[],Stack<Integer>nodes){
		visited[v]=true;
		AdjListNode head=graph.adjNodeList[v].head;
		while(head!=null){
			if(visited[head.dest]!=true){
				topologicalSortUtil(graph, head.dest, visited, nodes);
			}
			head=head.next;
		}
		nodes.push(v);
	}
	public static void topologicalSort(Graph graph){
		Stack<Integer>nodes=new Stack<Integer>();
		boolean visited[]=new boolean[graph.V];
		for(int i=0;i<graph.V;i++){
			if(visited[i]!=true){
				topologicalSortUtil(graph, i, visited, nodes);
			}
		}
		
		while(!nodes.isEmpty()){
			System.out.print(nodes.pop()+"  ");
		}
	}
	public static void longestPath(Graph graph,int source){
		boolean visited[]=new boolean[graph.V];
		//get the topological sort of the graph
		Stack<Integer>nodes =new Stack<Integer>();
		//for(int i=0;i<graph.V;i++){
		//	if(visited[i]!=true){
				topologicalSortUtil(graph, source, visited, nodes);
			//}
		//}
		
		/// create a distances array and intialise them to infinity(min)
		Integer distances[]=new Integer[graph.V];
		for(int i=0;i<distances.length;i++){
			distances[i]=-1;
		}
		distances[source]=0;
		while(!nodes.isEmpty()){
			int current=nodes.pop();
			AdjListNode head=graph.adjNodeList[current].head;
			while(head!=null){
				int weight=distances[head.dest]+head.weight;
				
			}
		}
	}
	public static void motherVertexGraph(Graph graph){
		boolean visited[]=new boolean[graph.V];
		int v=-1;
		for(int i=0;i<graph.V;i++){
			if(visited[i]!=true){
				depthFirstSearchUtil(graph, i, visited);
				v=i;
			}
			
		}
		boolean motherVertTest[]=new boolean[graph.V];
		depthFirstSearchUtil(graph, v,motherVertTest);
		for(int i=0;i<motherVertTest.length;i++){
			if(motherVertTest[i]!=false){
				
				System.out.println("there is no mother vertex in this graph");
				break;
			}
		}
		System.out.println("the mother verted is : "+v);
	}
}
